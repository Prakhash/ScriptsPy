{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from distutils.util import execute\n",
    "import subprocess\n",
    "import math\n",
    "import statistics\n",
    "import os, subprocess\n",
    "import sys\n",
    "import time\n",
    "\n",
    "# Number of samples used\n",
    "NO_OF_SAMPLES = 100\n",
    "\n",
    "# Compile all the source codes\n",
    "def compileAll():\n",
    "    subprocess.call(['g++', '-o', 'MatrixMultiplicationSequential', 'MatrixMultiplicationSequential.CPP'])\n",
    "    subprocess.call(['g++', '-o', 'MatrixMultiplicationParallel', 'MatrixMultiplicationParallel.CPP', '-lm', '-fopenmp'])\n",
    "    subprocess.call(['g++', '-o', 'MatrixMultiplicationParallelOptimized', 'MatrixMultiplicationParallelOptimized.cpp', '-lm', '-fopenmp'])\n",
    "\n",
    "\n",
    "# Execute a given process and calculate the average and standard deviation\n",
    "def execute(command):\n",
    "    listCommand=[]\n",
    "    elapsedTimes = []\n",
    "    listCommand.append(command)\n",
    "    sizeToRun=100;\n",
    "    while(sizeToRun<1000):\n",
    "        for i in range(NO_OF_SAMPLES):\n",
    "            listCommand.append(str(sizeToRun))\n",
    "            time = subprocess.Popen(listCommand,stdout=subprocess.PIPE).communicate()[0]\n",
    "            listCommand.remove(str(sizeToRun))\n",
    "            elapsedTimes.append(float(time))\n",
    "\n",
    "        average = statistics.mean(elapsedTimes)\n",
    "        standardDeviation = statistics.stdev(elapsedTimes)\n",
    "        samples = math.ceil(math.pow(((100 * 1.96 * standardDeviation) / (5 * average)), 2))\n",
    "        print('Average: ' + str(average))\n",
    "        print('Std.Dev: ' + str(standardDeviation))\n",
    "        print('Samples: ' + str(samples))\n",
    "        sizeToRun=sizeToRun+100\n",
    "\n",
    "\n",
    "# Compile all the files\n",
    "compileAll()\n",
    "print(\"Sequential\")\n",
    "execute('./MatrixMultiplicationSequential')\n",
    "print(\"\\nParallel\")\n",
    "execute('./MatrixMultiplicationParallel')\n",
    "print(\"\\nParallel Optimized\")\n",
    "execute('./MatrixMultiplicationParallelOptimized')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.4.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
